LIBRERIAS:

  #include<nombreLibreria>    //importar libreria
  
  > ejemplos librerias:
      * iostream    -> librearia basica, permite entrar y sacar datos por la terminal
      * cmath       -> lebreria basica, incluye herramientas matematicas basicas
      * math.h      -> libreria matematica y trigonométrica
      * string      -> enables string data type (incluida en iostream)
      * cstdlib     -> random numbers
      * cstime      -> time() function
      
      
FUNCION PRINCIPAL:
  
  int main() {
  
    [Codigo]
  
    return 0;   // asegurarse q todo ha finalizado correctamente
  }
COMENTARIOS:

  > inline    ->    "//"
  > multiline ->    "/*"  ...   "*/"
  
  - Facilitate understanding of the code
  
IMPRIMIR EN LA TERMINAL:

  using namespace std;    // fuera de main (si no se incluye hay que añadir std:: antes de cout)

  cout<<"lo que queras imprimir"    // en main

  > saltos de linea :   -> icluir "<<endl" fuera de la str
                        -> incluir "\n" en la str
  > tabulaciones : "\t"
  
  > encadenar diferentes outputs : "<<"   ex: cout<<"Hola me llamo "<<nombre<<endl
  
  > numero de decimales a mostrar : "cout.precission(n)"    (redondea a n cifras)
  
  > cuando acaba un programa la terminal no se cierra hasta haber apretado una tecla:
    -> "getch()" al funal del programa    (requiere libreria conio.h)
    -> "system("pause") al final del programa   (requiere libreria stdlib.h)
        * incluye instrucciones para continuar el programa
                        
  DATA TYPES:
    
    > int     * numero entero
              * modifiers: (incluir antes del dataType en la definicion)
                > signed    ->    puede ser + y -
                > unsigned  ->    solo +
                > short     ->    half default size
                > long      ->    twice default size
              * min size:
                > short     ->    2 bytes
                > int       ->    2 bytes
                > long      ->    4 bytes
                > long long ->    8 bytes
    
    > float    * numero decimal
               * min size : 4 bytes
    
    > double  * numero decimal de mucha precision
              * min size: 8 bytes
              * modifiers: (incluir antes del dataType en la definicion)
                > long    ->    twice default size (8 bytes)
    
    > char    * caracter    (representar entre '')
              * min size : 1 byte
    
    > string  * text    (representar entre "")
              * need to include <string> library to use (incluida en <iostream>
    
    > bool    * true or false
              * if asigned to an integer: true = 1 y false = 0
              * if an int asigned to a bool: 0 = false y non-zero = true
              * min size : 1 byte
    
  VARIABLES: espacio de memoria donde se almacen aun valor determinado
  
    declaración:    dataType identifier ; (identifier = nombre de la variable)
    asign value:    identifyer = value ;    (operador de asignacion "=")
    declare multile variables in one line -> separate by ","  (same type)
    declare without specifying type:    auto name = value ;   (asigns type of value)
    
 ARRAYS UNIDIMENSIONALES - VECTORES:
  - todos del mismo tipo
  - indice 0
  - definicion:   tipo nombre[tamaño] ;
  - inicializar en definicion:    tipo nombre[] = {v1, v2, ...} ;
  - acceder un elemento:    nombre[indice] 
  - concadenar dos vectores: (utilizar bucles)
  
ARRAYS BIDIMENSIONALES - MATRICES:
 - todos del mismo tipo
 - indice 0
 - declaración: tipo nombre[filas][columnas]
 - iniciar en declaracion: tipo nombre[filas][columnas] = {v1_1, v2_1, ...,v1_2,v2_2,...}
    ej: int numeros[2][3] = {1,2,3 , 4,5,6} es la matriz :
          | 1 2 3 |
          | 4 5 6 |
    * opcion mas ordenada : int numeros[2][3] = {{1,2,3},{4,5,6}} ;
 - acceder a un valor:  nombre[fila][columna]
 
MULTIDIMENSIONAL ARRAYS:
  - todos del mismo tipo
  - indice 0
  - Declaration:    type name[size1][size2]...[sizeN] ;
  
POINTERS :  variable with the address of another variable as its value

  - access memory location address of a variable:   &nombreVariable
  - datatype: hexadecimal
  
  - declare:    dataTypePointedAt *nameOfPointer
  - asign a value:    nameOfPointer = &variable
 
 LECTURA O ENTRADA DE DATOS
 
  Un solo valor:    cin>>varName  //guardar valor q entra el usuario en el terminal en varName
  
  Mas de un valor:  cin>>val1>>val2 
  
 OPERADORES
 
  Arithmetic:
    suma:   a + b
    resta:  a - b
    multiplicacion:   a * b
    división:   a / b   (la division de enteros elimina los decimales)
    modulus:    a % b     (residue de la division entera de a entre b)
  
  cmath:
    - raiz cuadrada: sqrt(x)
    - 
    
  math.h:
    - raiz cuadrada: sqrt(x)
    - portencia: pow(valor, exponente)
  
  Asingment:
    - normal:   a = b     -> a is given the value of b
    - suma:     a += b    ->    a = a + b
    - resta:    a -= b    ->    a = a - b
    - multiplicar   a *= b  ->  a = a * b
    - division: a /= b    ->    a = a / b
    
  Short operators:
    - increment:   a++  o  ++a ->   a += 1
    - decrement:   a--  o  --a ->   a -= 1
     
     *Prefix :  first changes value of a and then evaluates expression
        ej:   int a = 5, b ;
              b = ++a ;
        result: a = 6 and b = 6
     *Posfix :  first evaluates expression and then changes value of a
        ej:   int a = 5, b ;
              b = ++a ;
        result: a = 6 and b = 5
     
  Logicos:
    - igualdad:       a == b
    - diferente:      a != b
    - mayor:          a > b
    - menor:          a < b
    - mayor o igual:  a >= b
    - menor o igual:  a <= b
    
    - or:  a || b
    - and: a && b
    - not:  !a
  
  Pointers:
    - Address-of:   &var   (returns addrress of the variable var)
    - Contents-of:  *point  (returns the value in address point)
        * if point is the pointer of var, *point is interchangeable with var
    
ESTRUCTURAS CONDICIONALES:
  
  Sentencia IF: 
  
    if(condicion){
      Instrucciones;
    }
    
    Si la condicion es cierta ejecuta las Instrucciones y continua, 
    si es falsa no ejecuta las Instrucciones
    
    Si solo hay una instruccion no hace falta poner {}  (not a good practice)
    
  Sentencia IF ELSE:
  
    if (condicion){
      Instituciones 1;
    } else {
      Instrucciones 2;
    }
    
    Si la condicion es cierta se ejecutan las intrucciones 1 si no se ejecutan 
    las instrucciones 2. Al acabar se continua con el programa.
    
    Si solo hay una instruccion no hace falta poner {} (not a good practice)

  Sentencia IF ELSE IF:
  
    if (condicion1) {
      Instrucciones 1;
    } else if (condicion2) {
      Instrucciones 2;
    } else {
      Instrucciones 3;
    }
    
    Si se cumple la condicion1 se ejecutan las Instrucciones 1, si no se evalua 
    la condicion 2, si es cierta se ejecutan las Instrucciones 2 y si no se ejecutan
    las instrucciones 3. Al acabar se continua con el programa.
    
    Si solo hay una instruccion no hace falta poner {} (not a good practice)
    
  Sentencia SWITCH:
    
    switch (expresion) {
      case literal1:
        conjunto de instrucciones 1;
        break;
      case literal2:
        conjunto de instrucciones 2;
        break;
      default:
        conjunto de instrucciones por defecto;
        break;
    }
    
    Se evalua la expresión, y se ejecuta el caso cuya literal es igual al valor de la 
    expresion. En caso de no encontrar ninguna se ejecuta el default.
    
    Si no se incluye break, se ejecutara el siguiente caso al acabar.
    
BUCLES

  Sentencia WHILE:
  
    while (expresion logica) {
      conjunto de instrucciones ;
    }
    
    Conjunto de instrucciones se repite mientras se cumpla la expresión logica. Al 
    dejar de ser cierta, se continua con el programa.
    
    La sentencia se comprueba antes de empezar.
    
    Inicializar iterador fuera del bucle.
    
    Use "break;" to exit the loop at any time
    
  Sentencia DO WHILE:
  
    do {
      conjunto de instrucciones ;
    } while (expresión logica) ;
    
    Conjunto de expresiones se repite mientras se cumpla la expresión logica. Al 
    dejar de ser cierta, se continua con el programa.
    
    La sentencia se comprueba despues de la primera iteración.
    
    Inicializar iterador fuera del bucle.
    
    Use "break;" to exit the loop at any time
    
  Sentencia FOR:
  
    for(expr1; expresion logica; expr2) {
      conjunto de instrucciones ;
    }
    
    expr1   ->  inicializar el iterador
    expr2   ->  aumentar el iterador
    
    Se ejecuta el conjunto de instrucciones mientras la expresion logica se cumpla
    
    Se pueden ignorar las expr1 y expr2 pero hay que incluir los ;
    
    Use "break;" to exit the loop at any time
    
POINTERS :  variable with the address of another variable as its value

  - access memory location address of a variable:   &nombreVariable
  - datatype: hexadecimal
  
  - declare:    dataTypePointedAt *nameOfPointer
  - asign a value:    nameOfPointer = &variable
  - if pointer is emptry asign constant "NULL" (good practice)
 
 
MEMORY:
  
  - Parts:
    > The stack : local variables
    > The heap  : unused memory - can be used when program runs to dynamically 
                  allocate memory
  - create the space to store a variable (on the heap) and return address of space 
    allocated:
      -> new dataType ;   (works for arrays also)
      -> store that access in a pointer :    
          int *pointer = new int ;   
          *pointer = 5 ;             
            
            exp: p stored in stack, with heap allocated address as value
                 5 is the value of that address in the heap
  - Variables in the stack managing memory is carried out automatically
  - Have to manually handle dynamically allocated memory:
      > free up some memory : delete pointer  (releases memory pointed to by pointer)
        * doesn't deleat the pointer itself -> dangling pointers : point non-existent
                                                                   memory locations
  
  - Get the size of a variable or datatype -> sizeof(name) ; (in bytes)
      *a also works with arr
      
FUNCTIONS:

  - Prototypes : returnDataType functionName () ;
    > need to declare the body else where
    > needed if declare function in one file and want to use it in another

  - Declaration: (out of main() )

      returnDataType functionName ( arguments ) {

        //Body of the function
        
      }
      
  - Return:
    > If doesn't return anything, return type -> "void"
    
  - Parameters:
    > Optional
    > Structure -> dataType name
    > separated wuth ","
    
    > Default values:   asign the values in the declaration
      * To have a default value the parameters have to be the leftmost
      * Used if no other value provided when called
      
      ex: void func (int p1, int p2 = 3, int p3 = 1) {}  //is valid
      ex: void func (int p1 = 1, int p2, int p3 = 0) {}  //isn't valid
      
    
  - Call -> functionName ( parameters )
  
  - Overloading -> you can create functions of the same name but different parameters
                   number or type
  
RANDOM
  - Random numbers:
      > using <cstdlib> -> rand()       (semirandom)
                        -> min + rand() % (max - min + 1)  (in the range [min, max])
                        -> srand(seed)  
                          * Hace que rand() haga numeros random
                          * necesita una seed / a misma seed mismos numeros
                          
                        -> time() -> returns the hour (used as seed) : <cstime>
                            * time(0) -> hour in seconds
      
   
  
      
      
      
      
      
      
      
    
    
    
    
    
